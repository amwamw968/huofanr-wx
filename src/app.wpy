<style lang="sass" src="static/sass/index.sass"></style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'
import 'promise-polyfill'
import CONFIG from 'js/config'
import Token from 'js/token'

const token = new Token()

export default class extends wepy.app {
  config = {
    pages: [
      'pages/index/index',
      'pages/index/search',
      'pages/index/limit-pay',
      'pages/category/index',
      'pages/profile/index',
      'pages/profile/address',
      'pages/profile/coupon',
      'pages/profile/auth',
      'pages/profile/uploadIDCard',
      'pages/cart/index',
      'pages/cart/pay',
      'pages/cart/pay-success',
      'pages/order/index',
      'pages/goods/index',
    ],
    window: {
      backgroundTextStyle: 'light',
      navigationBarBackgroundColor: '#fff',
      navigationBarTitleText: '活范儿',
      navigationBarTextStyle: 'black',
    },
    tabBar: {
      backgroundColor: '#fff',
      color: '#333',
      selectedColor: '#ff0077',
      list: [
        {
          pagePath: 'pages/index/index',
          text: '首页',
          iconPath: 'static/imgs/home-icon.png',
          selectedIconPath: 'static/imgs/home-active.png',
        },
        {
          pagePath: 'pages/category/index',
          text: '分类',
          iconPath: 'static/imgs/category-icon.png',
          selectedIconPath: 'static/imgs/category-active.png',
        },
        {
          pagePath: 'pages/cart/index',
          text: '购物车',
          iconPath: 'static/imgs/cart-icon.png',
          selectedIconPath: 'static/imgs/cart-active.png',
        },
        {
          pagePath: 'pages/profile/index',
          text: '我的',
          iconPath: 'static/imgs/profile-icon.png',
          selectedIconPath: 'static/imgs/profile-active.png',
        },
      ]
    },
  }

  constructor () {
    super()
    this.use('requestfix')
    this.use('promisify')
    this.requestParams = {}

    // 为了防止无限循环，记录 401 次数
    this.noPermissionTimes = 0

    this.intercept('request', {
      config(params) {
        if (typeof params === 'string') params = {url: params}
        if (params.url.indexOf('https://') < 0) {
          params.url = CONFIG.baseUrl + params.url
        }

        const token = wepy.getStorageSync('token')
        if (token) params.header = {token}

        // 当 url 为 'users/login' 时，不储存 params，否则会把上一次请求的 params 覆盖掉
        if (params.url.indexOf('cmd/login') < 0) {
          // 储存当前的 params ，如果 http 401，再次拿这个 params 重新请求 API
          this.requestParams = params
        }
        return params
      },
      async success(res) {
        const statusCode = res.statusCode.toString()
        if (statusCode === '200') {
          if (res.data.code === 200) return res.data.data
          return this._processError(res.data.msg)
        } else if (statusCode === '401') {
          // 未授权重试机制，当检测为 401 时，获取新的 token，然后重新发起对应的请求
          // 为了防止无限循环，只重新发起一次请求
          if (this.noPermissionTimes > 0) {
            this.noPermissionTimes = 0
            return this._processError()
          }
          this.noPermissionTimes++
          return this._refetchHttp()
        } else {
          return this._processError()
        }
      },
      fail(error) {
        // TODO 提示错误信息
        return this._processError(error)
      },
    })
  }

  async _refetchHttp() {
    // 重新获取 token
    const res = await token.getTokenFromServer()
    if (!res) {
      // TODO 重新获取 token 失败了怎么办？
      return this._processError('重新获取 token 失败')
    }
    // 拿着上一次的 params 重新请求 API
    return wepy.request(this.requestParams)
  }

  _processError(err = '网络错误，请重试') {
    wepy.showToast({
      title: err,
      image: '/static/imgs/error-icon.png',
    })
    return Promise.reject(err)
  }

  async onLaunch() {
    // token.verify()
  }
}
</script>
